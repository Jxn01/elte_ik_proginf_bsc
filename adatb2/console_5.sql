SELECT username, account_status, expiry_date FROM DBA_USERS WHERE username=user;

SELECT COUNT(*) AS "OSZLOPOK SZAMA" FROM DBA_TAB_COLUMNS
WHERE OWNER='NIKOVITS' AND TABLE_NAME='EMP';

SELECT DISTINCT OWNER, TABLE_NAME, COLUMN_NAME FROM DBA_TAB_COLUMNS
WHERE COLUMN_NAME LIKE 'Z%';

SELECT * FROM DBA_TAB_COLUMNS
WHERE COLUMN_NAME LIKE 'Z%';

SELECT TABLE_NAME, COUNT(*) FROM DBA_TAB_COLUMNS
WHERE DATA_TYPE = 'DATE'
GROUP BY OWNER, TABLE_NAME
HAVING COUNT(*) > 7;

SELECT OWNER, TABLE_NAME FROM DBA_TAB_COLUMNS
WHERE DATA_TYPE = 'VARCHAR2' AND COLUMN_ID = 1
INTERSECT
SELECT OWNER, TABLE_NAME FROM DBA_TAB_COLUMNS
WHERE DATA_TYPE = 'VARCHAR2' AND COLUMN_ID = 4;

SELECT * FROM VDANI.DOLGOZO;

CREATE SYNONYM D FOR VDANI.DOLGOZO;

SELECT * FROM D;

CREATE DATABASE LINK ULLMAN_LINK
CONNECT TO PST8RA IDENTIFIED BY jelszo
USING 'ullman.inf.elte.hu:1521/ullman';

DROP DATABASE LINK ULLMAN_LINK;

SELECT * FROM DBA_OBJECTS@ULLMAN_LINK;

SELECT OBJECT_TYPE FROM DBA_OBJECTS
GROUP BY OBJECT_TYPE
MINUS
SELECT OBJECT_TYPE FROM DBA_OBJECTS@ULLMAN_LINK
GROUP BY OBJECT_TYPE;

SELECT * FROM sz1;

SELECT * FROM DBA_OBJECTS WHERE OBJECT_NAME = 'SZ1';

SELECT * FROM NIKOVITS.SZALLIT;

SELECT * FROM DBA_OBJECTS
WHERE OWNER='NIKOVITS' AND OBJECT_NAME='SZALLIT';

SELECT * FROM DBA_SEGMENTS
WHERE OWNER='NIKOVITS' AND SEGMENT_NAME='SZALLIT';

SELECT * FROM DBA_EXTENTS
WHERE OWNER='NIKOVITS' AND SEGMENT_NAME='SZALLIT';

SELECT * FROM DBA_DATA_FILES;

SELECT * FROM DBA_TABLESPACES;

SELECT * FROM DBA_TEMP_FILES;

SELECT FILE_NAME, BYTES FROM DBA_DATA_FILES
UNION
SELECT FILE_NAME, BYTES FROM DBA_TEMP_FILES
ORDER BY BYTES DESC;

SELECT FILE_NAME, BYTES FROM DBA_DATA_FILES
UNION
SELECT FILE_NAME, BYTES FROM DBA_TEMP_FILES
ORDER BY BYTES DESC;

SELECT TABLESPACE_NAME FROM DBA_TABLESPACES WHERE CONTENTS!='TEMPORARY';

SELECT TABLESPACE_NAME, BYTES, BLOCKS FROM DBA_DATA_FILES
WHERE TABLESPACE_NAME IN (SELECT TABLESPACE_NAME FROM DBA_TABLESPACES WHERE CONTENTS!='TEMPORARY');

SELECT * FROM DBA_SEGMENTS;

SELECT SEGMENT_NAME, OWNER, EXTENTS, BYTES FROM DBA_SEGMENTS
WHERE SEGMENT_TYPE='TABLE'
ORDER BY BYTES DESC
FETCH FIRST 1 ROWS ONLY;

SELECT * FROM DBA_DATA_FILES;

SELECT * FROM DBA_SEGMENTS;

SELECT DBA_DATA_FILES.FILE_NAME, DBA_DATA_FILES.BYTES "TELJES MÉRET", SUM(DBA_SEGMENTS.BYTES) "LEFOGLALT" FROM DBA_DATA_FILES JOIN DBA_SEGMENTS ON DBA_SEGMENTS.TABLESPACE_NAME = DBA_DATA_FILES.TABLESPACE_NAME
GROUP BY DBA_DATA_FILES.FILE_NAME, DBA_DATA_FILES.BYTES;

SELECT DNEV, ROWID FROM VDANI.DOLGOZO;

SELECT BLOCKS FROM DBA_SEGMENTS
WHERE SEGMENT_TYPE = 'TABLE' AND OWNER = 'NIKOVITS' AND SEGMENT_NAME='CIKK';

SELECT dnev, dbms_rowid.rowid_object(ROWID) adatobj,
       dbms_rowid.rowid_relative_fno(ROWID) fajl,
       dbms_rowid.rowid_block_number(ROWID) blokk,
       dbms_rowid.rowid_row_number(ROWID) sor
FROM vdani.dolgozo;

SELECT dbms_rowid.rowid_relative_fno(ROWID) file_id,
       dbms_rowid.rowid_block_number(ROWID) blokk_id,
       COUNT(dbms_rowid.rowid_row_number(ROWID)) darab
FROM NIKOVITS.CIKK
GROUP BY dbms_rowid.rowid_relative_fno(ROWID), dbms_rowid.rowid_block_number(ROWID);

SELECT *
FROM NIKOVITS.CIKK;

-- T(R) Az R reláció sorainak száma
-- bf(R) Blokkolási faktor, az R reláció egy blokkjában tárolható sorok száma
-- B(R) Az R reláció blokkjainak száma

-- 1. feladat
-- R tábla, I1 sűrű és I2 ritka indexek
-- T(R) = 10000, bf(R) = 20, bf(I1) = 100, bf(I2) = 100
-- B(R), B(I1), B(I2) = ?
-- B(R) = T(R) / bf(R) = 10000 / 20 = 500
-- B(I1) = T(R) / bf(I1) = 10000 / 100 = 100
-- B(I2) = B(R) / bf(I2) = 500 / 100 = 5

-- 2. feladat
-- R tábla, I1 sűrű és I2 ritka indexek, a blokkok csak 80%-ig lehetnek tele
-- T(R) = 10000, bf(R) = 20 (effective: 20*0,8 = 16), bf(I1) = 100 (effective: 100*0,8 = 80), bf(I2) = 100 (effective: 100*0,8 = 80)
-- B(R), B(I1), B(I2) = ?
-- B(R) = T(R) / bf(R) = 10000 / 16 = 625
-- B(I1) = T(R) / bf(I1) = 10000 / 80 = 125
-- B(I2) = B(R) / bf(I2) = 625 / 80 = 7,8125 = 8

-- 3. feladat
-- T(R) = 1000000, bf(R) = 20
-- Egy A oszlopra készítünk B+ fa indexet, amelyre bf(I) = 50
-- B(I) = ?
-- B(I) = T(R) / bf(I) = 1000000 / 50 = 20000 + 20000 / 50 = 400 + 400 / 50 = 8 + 8 / 50 = 1 = 20409
-- Hány blokkot kell beolvasnunk egy konkrét sor megtalálásához a legrosszabb esetben, ha:
-- a fenti B+ fa indexet használjuk (ehhez ki kell számolnunk a B(I)-t)
-- 4+1 = 5 blokkot kell beolvasni